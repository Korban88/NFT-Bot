# scanner.py
import os
import asyncio
import hashlib
import logging
from decimal import Decimal
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Any, Optional

import httpx
from aiogram import Bot

from db import (
    get_scanner_users,               # () -> List[int]
    get_or_create_scanner_settings,  # (user_id) -> Dict
    was_deal_seen,                   # (deal_id, url=None) -> bool
    mark_deal_seen,                  # (deal_dict) -> None
)

log = logging.getLogger("nftbot.scanner")

# ===== ENV =====
POLL_SECONDS = int(os.getenv("POLL_SECONDS", "20"))

# –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (TonAPI REST / Getgems –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º–∏)
GETGEMS_ENABLED = os.getenv("GETGEMS_ENABLED", "0") == "1"
TONAPI_REST_ENABLED = os.getenv("TONAPI_REST_ENABLED", "0") == "1"

# dTON
DTON_ENABLED = os.getenv("DTON_ENABLED", "1") == "1"
DTON_API_KEY = os.getenv("DTON_API_KEY", "")
DTON_BASE = os.getenv("DTON_BASE", "https://dton.io").rstrip("/")
DTON_PAGE_SIZE = int(os.getenv("DTON_PAGE_SIZE", "50"))
DTON_LOOKBACK_MIN = int(os.getenv("DTON_LOOKBACK_MIN", "60"))

# ===== –£–¢–ò–õ–ò–¢–´ =====

def _deal_id(*parts: str) -> str:
    h = hashlib.sha256("|".join(parts).encode()).hexdigest()[:32]
    return f"deal_{h}"

def _as_ton(nano: Optional[int]) -> Optional[float]:
    if nano is None:
        return None
    try:
        return float(Decimal(nano) / Decimal(1_000_000_000))
    except Exception:
        return None

# ===== dTON: –∑–∞–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª =====

async def _fetch_from_dton() -> List[Dict[str, Any]]:
    if not DTON_ENABLED or not DTON_API_KEY:
        return []

    url = f"{DTON_BASE}/{DTON_API_KEY}/graphql"
    since = datetime.now(timezone.utc) - timedelta(minutes=DTON_LOOKBACK_MIN)
    since_str = since.strftime("%Y-%m-%d %H:%M:%S")

    gql = """
    query FetchClosedNftSales($gt: String!, $pageSize: Int!) {
      raw_transactions(
        parsed_seller_is_closed: 1
        account_state_state_init_code_has_get_nft_data: 1
        gen_utime__gt: $gt
        page: 0
        page_size: $pageSize
        order_by: "gen_utime"
        order_desc: true
      ) {
        nft_address: address__friendly
        col_address: parsed_nft_collection_address_address__friendly
        price: parsed_seller_nft_price
      }
    }
    """
    variables = {"gt": since_str, "pageSize": DTON_PAGE_SIZE}

    try:
        async with httpx.AsyncClient(timeout=15) as client:
            r = await client.post(url, json={"query": gql, "variables": variables})
            log.info("HTTP dTON POST %s -> %s", url, r.status_code)
            data = r.json()
    except Exception as e:
        log.warning("dTON: –∑–∞–ø—Ä–æ—Å —É–ø–∞–ª: %s", e)
        return []

    if (data or {}).get("errors"):
        log.info("dTON -> –æ—à–∏–±–∫–∏ GraphQL: %s", data["errors"])
        return []

    rows = (data or {}).get("data", {}).get("raw_transactions", []) or []
    deals: List[Dict[str, Any]] = []
    for it in rows:
        nft_addr = it.get("nft_address")
        col_addr = it.get("col_address")
        price_nano = it.get("price")
        price_ton = _as_ton(price_nano)
        deal_url = f"https://tonviewer.com/{nft_addr}" if nft_addr else None

        deals.append({
            "deal_id": _deal_id("dton", nft_addr or "", str(price_nano or "")),
            "url": deal_url,
            "collection": col_addr or "",
            "name": nft_addr or "NFT",
            "price_ton": price_ton,
            "floor_ton": None,     # floor –ø–æ–∫–∞ –Ω–µ —Å—á–∏—Ç–∞–µ–º
            "discount": None,      # —Å–∫–∏–¥–∫–∏ –Ω–µ—Ç –±–µ–∑ floor
            "source": "dton",
        })
    return deals

# ===== –∑–∞–≥–ª—É—à–∫–∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–≤—ã–∫–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) =====

async def _fetch_from_tonapi_rest() -> List[Dict[str, Any]]:
    return [] if not TONAPI_REST_ENABLED else []

async def _fetch_from_getgems() -> List[Dict[str, Any]]:
    return [] if not GETGEMS_ENABLED else []

# ===== –§–ò–õ–¨–¢–†–´/–ù–û–¢–ò–§–ò–ö–ê–¶–ò–ò =====

def _passes_user_filters(deal: Dict[str, Any], st: Dict[str, Any]) -> bool:
    """
    –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º/—Ü–µ–Ω–µ.
    –î–ª—è discount ‚Äî –µ—Å–ª–∏ None, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ min_discount <= 0.
    """
    min_discount: Optional[float] = st.get("min_discount")
    max_price_ton = st.get("max_price_ton")
    collections = st.get("collections")

    if collections:
        allow = {str(c or "").lower() for c in collections}
        if (deal.get("collection") or "").lower() not in allow:
            return False

    price = deal.get("price_ton")
    if max_price_ton is not None and price is not None:
        try:
            if Decimal(str(price)) > Decimal(str(max_price_ton)):
                return False
        except Exception:
            pass

    disc = deal.get("discount")
    if disc is None:
        return (min_discount is None) or (float(min_discount) <= 0.0)
    try:
        return float(disc) >= float(min_discount or 0.0)
    except Exception:
        return True

async def _notify_user(bot: Bot, user_id: int, deal: Dict[str, Any]):
    parts = ["üß© <b>–°–∏–≥–Ω–∞–ª (dTON)</b>"]
    if deal.get("name"):
        parts.append(f"‚Ä¢ NFT: <code>{deal['name']}</code>")
    if deal.get("collection"):
        parts.append(f"‚Ä¢ –ö–æ–ª–ª–µ–∫—Ü–∏—è: <code>{deal['collection']}</code>")
    if deal.get("price_ton") is not None:
        parts.append(f"‚Ä¢ –¶–µ–Ω–∞: <b>{deal['price_ton']:.4f} TON</b>")
    if deal.get("discount") is not None:
        parts.append(f"‚Ä¢ –°–∫–∏–¥–∫–∞: <b>{deal['discount']:.1f}%</b>")
    if deal.get("url"):
        parts.append(f"\n‚û°Ô∏è <a href=\"{deal['url']}\">–û—Ç–∫—Ä—ã—Ç—å –≤ Tonviewer</a>")
    text = "\n".join(parts)
    await bot.send_message(user_id, text, disable_web_page_preview=True)

# ===== –û–î–ò–ù –¢–ò–ö –°–ö–ê–ù–ï–†–ê =====

async def _scan_once(bot: Optional[Bot]) -> None:
    # 1) —Å–æ–±—Ä–∞—Ç—å —Å–¥–µ–ª–∫–∏ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    batches: List[List[Dict[str, Any]]] = []
    try:
        batches.append(await _fetch_from_dton())
    except Exception as e:
        log.warning("dTON fetch failed: %s", e)

    # (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –±—É–¥—É—â–µ–µ)
    try:
        batches.append(await _fetch_from_tonapi_rest())
    except Exception as e:
        log.warning("TonAPI REST fetch failed: %s", e)
    try:
        batches.append(await _fetch_from_getgems())
    except Exception as e:
        log.warning("Getgems fetch failed: %s", e)

    all_items = [it for batch in batches for it in (batch or [])]
    uniq: Dict[str, Dict[str, Any]] = {}
    for it in all_items:
        did = it.get("deal_id")
        if not did:
            continue
        uniq[did] = it

    log.info("–°—É–º–º–∞—Ä–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ %d / —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö %d –æ—Ä–¥–µ—Ä–æ–≤", len(all_items), len(uniq))
    if not uniq:
        return

    # 2) —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await get_scanner_users()
    if not users:
        log.info("–ù–µ—Ç –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return
    log.info("–í–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d", len(users))

    # 3) —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
    sent_total = 0
    for deal in uniq.values():
        # –ï—Å–ª–∏ —É–∂–µ –≤–∏–¥–µ–ª–∏ —ç—Ç–æ—Ç URL/–ª–æ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if await was_deal_seen(deal["deal_id"], deal.get("url")):
            continue

        delivered_to_any = False
        for uid in users:
            st = await get_or_create_scanner_settings(uid)
            if _passes_user_filters(deal, st):
                if bot:
                    try:
                        await _notify_user(bot, uid, deal)
                        delivered_to_any = True
                        sent_total += 1
                    except Exception as e:
                        log.warning("Send to %s failed: %s", uid, e)

        # –í–ê–ñ–ù–û: –ø–æ–º–µ—á–∞–µ–º –≤ –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–º—É-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
        if delivered_to_any:
            await mark_deal_seen(deal)

    log.info("–†–∞–∑–æ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: %d", sent_total)

# ===== –¶–ò–ö–õ =====

async def scanner_loop():
    log.info("Scanner loop started")

    token = os.getenv("BOT_TOKEN", "")
    bot: Optional[Bot] = Bot(token, parse_mode="HTML") if token else None
    if not bot:
        log.warning("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç.")

    while True:
        try:
            await _scan_once(bot)
        except Exception as e:
            log.exception("scanner tick failed: %s", e)
        await asyncio.sleep(POLL_SECONDS)
