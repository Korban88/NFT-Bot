# scanner.py
import os
import asyncio
import hashlib
import logging
from decimal import Decimal
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Any, Optional

import httpx

from db import (
    get_pool,
    get_scanner_users,
    get_or_create_scanner_settings,
    was_deal_seen,
    mark_deal_seen,
)

log = logging.getLogger("nftbot.scanner")

# ===== ENV =====
POLL_SECONDS = int(os.getenv("POLL_SECONDS", "20"))

# –∏—Å—Ç–æ—á–Ω–∏–∫–∏
GETGEMS_ENABLED = os.getenv("GETGEMS_ENABLED", "0") == "1"
TONAPI_REST_ENABLED = os.getenv("TONAPI_REST_ENABLED", "0") == "1"

# dTON
DTON_ENABLED = os.getenv("DTON_ENABLED", "0") == "1"
DTON_API_KEY = os.getenv("DTON_API_KEY", "")
DTON_BASE = os.getenv("DTON_BASE", "https://dton.io").rstrip("/")
DTON_PAGE_SIZE = int(os.getenv("DTON_PAGE_SIZE", "50"))
# —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ —Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (dTON raw_transactions)
DTON_LOOKBACK_MIN = int(os.getenv("DTON_LOOKBACK_MIN", "60"))

TONAPI_KEY = os.getenv("TONAPI_KEY") or os.getenv("TONAPI_TOKEN") or ""
HEADERS_TONAPI = {"Authorization": f"Bearer {TONAPI_KEY}"} if TONAPI_KEY else {}

# ===== –£–¢–ò–õ–ò–¢–´ =====

def _deal_id(*parts: str) -> str:
    h = hashlib.sha256("|".join(parts).encode()).hexdigest()[:32]
    return f"deal_{h}"

def _as_ton(nano: Optional[int]) -> Optional[float]:
    if nano is None:
        return None
    try:
        return float(Decimal(nano) / Decimal(1_000_000_000))
    except Exception:
        return None

# ===== dTON =====
# –ò—Å–ø–æ–ª—å–∑—É–µ–º dTON GraphQL:
# - —Ç–∞–±–ª–∏—Ü–∞ raw_transactions ‚Äî –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ NFT —Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ —Ü–µ–Ω—ã –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
# - —Ñ–∏–ª—å—Ç—Ä—ã: parsed_seller_is_closed=1, account_state_state_init_code_has_get_nft_data=1, gen_utime__gt
# –ò—Å—Ç–æ—á–Ω–∏–∫–∏: docs/—Å—Ç–∞—Ç—å–∏ dTON —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –ø–æ–ª–µ–π parsed_* –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.

async def _fetch_from_dton() -> List[Dict[str, Any]]:
    if not DTON_ENABLED:
        return []

    if not DTON_API_KEY:
        log.warning("dTON –≤–∫–ª—é—á–µ–Ω, –Ω–æ DTON_API_KEY –ø—É—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫.")
        return []

    url = f"{DTON_BASE}/{DTON_API_KEY}/graphql"

    # –±–µ—Ä—ë–º —Å–¥–µ–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    since = datetime.now(timezone.utc) - timedelta(minutes=DTON_LOOKBACK_MIN)
    since_str = since.strftime("%Y-%m-%d %H:%M:%S")

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –ø—Ä–∏–º–µ—Ä–∞–º dTON:
    # - parsed_seller_is_closed: 1  ‚Äî –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
    # - account_state_state_init_code_has_get_nft_data: 1 ‚Äî —ç—Ç–æ —Ç–æ—á–Ω–æ NFT
    # - gen_utime__gt ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å NFT –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ friendly-–≤–∏–¥–µ + —Ü–µ–Ω—É (–≤ nanoTON).
    gql = """
    query FetchClosedNftSales($gt: String!, $pageSize: Int!) {
      raw_transactions(
        parsed_seller_is_closed: 1
        account_state_state_init_code_has_get_nft_data: 1
        gen_utime__gt: $gt
        page: 0
        page_size: $pageSize
        order_by: "gen_utime"
        order_desc: true
      ) {
        nft_address: address__friendly
        col_address: parsed_nft_collection_address_address__friendly
        price: parsed_seller_nft_price
      }
    }
    """

    variables = {
        "gt": since_str,
        "pageSize": DTON_PAGE_SIZE,
    }

    try:
        async with httpx.AsyncClient(timeout=15) as client:
            r = await client.post(url, json={"query": gql, "variables": variables})
            log.info("HTTP dTON POST %s -> %s", url, r.status_code)
            data = r.json()
    except Exception as e:
        log.warning("dTON: –∑–∞–ø—Ä–æ—Å —É–ø–∞–ª: %s", e)
        return []

    errors = (data or {}).get("errors")
    if errors:
        log.info("dTON -> –æ—à–∏–±–∫–∏ GraphQL: %s", errors)
        return []

    rows = (data or {}).get("data", {}).get("raw_transactions", []) or []
    deals: List[Dict[str, Any]] = []

    for it in rows:
        nft_addr = it.get("nft_address")  # friendly –∞–¥—Ä–µ—Å NFT
        col_addr = it.get("col_address")  # friendly –∞–¥—Ä–µ—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        price_nano = it.get("price")

        price_ton = _as_ton(price_nano)
        deal_url = f"https://tonviewer.com/{nft_addr}" if nft_addr else None

        deal = {
            "deal_id": _deal_id("dton", nft_addr or "", str(price_nano or "")),
            "url": deal_url,
            "collection": col_addr or "",
            "name": nft_addr or "NFT",
            "price_ton": price_ton,
            "floor_ton": None,      # dTON –∑–¥–µ—Å—å –Ω–µ –¥–∞—ë—Ç floor ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ/–∫–æ–ª–ª–µ–∫—Ü–∏—è–º
            "discount": None,       # —Å–∫–∏–¥–∫—É –Ω–µ —Å—á–∏—Ç–∞–µ–º –Ω–∞ —ç—Ç–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ
            "source": "dton",
        }
        deals.append(deal)

    return deals

# ===== (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø—Ä–æ—á–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–∏/–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ) =====

async def _fetch_from_tonapi_rest() -> List[Dict[str, Any]]:
    if not TONAPI_REST_ENABLED:
        return []
    # –ù–∞ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ TonAPI REST –æ—Ç–∫–ª—é—á—ë–Ω (—Å—Ç–∞—Ä—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã 404).
    return []

async def _fetch_from_getgems() -> List[Dict[str, Any]]:
    if not GETGEMS_ENABLED:
        return []
    # –ú—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ Getgems GraphQL ‚Äî —Å—Ö–µ–º–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏ —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.
    return []

# ===== –û–ë–©–ò–ô –°–ö–ê–ù =====

def _passes_user_filters(deal: Dict[str, Any], st: Dict[str, Any]) -> bool:
    """–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    min_discount: Optional[float] = st.get("min_discount")
    max_price_ton = st.get("max_price_ton")
    collections = st.get("collections")  # –º–æ–∂–µ—Ç –±—ã—Ç—å None –∏–ª–∏ list[str]

    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º
    if collections:
        # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º friendly-–∞–¥—Ä–µ—Å–∞ (–≤ –ë–î –º—ã —Ö—Ä–∞–Ω–∏–º –∫–∞–∫ –µ—Å—Ç—å)
        if not any(
            (deal.get("collection") or "").lower() == (c or "").lower()
            for c in collections
        ):
            return False

    # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ (–µ—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞)
    price = deal.get("price_ton")
    if max_price_ton is not None and price is not None:
        try:
            if Decimal(str(price)) > Decimal(str(max_price_ton)):
                return False
        except Exception:
            pass

    # –§–∏–ª—å—Ç—Ä –ø–æ —Å–∫–∏–¥–∫–µ (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ min_discount <= 0)
    disc = deal.get("discount")
    if disc is None:
        return (min_discount is None) or (float(min_discount) <= 0.0)
    else:
        try:
            return float(disc) >= float(min_discount or 0.0)
        except Exception:
            return True

async def _notify_user(user_id: int, deal: Dict[str, Any]):
    from aiogram import Bot
    TOKEN = os.getenv("BOT_TOKEN", "")
    if not TOKEN:
        return

    bot = Bot(TOKEN, parse_mode="HTML")
    try:
        parts = []
        parts.append(f"üß© <b>–°–∏–≥–Ω–∞–ª (dTON)</b>")
        if deal.get("name"):
            parts.append(f"‚Ä¢ NFT: <code>{deal['name']}</code>")
        if deal.get("collection"):
            parts.append(f"‚Ä¢ –ö–æ–ª–ª–µ–∫—Ü–∏—è: <code>{deal['collection']}</code>")
        if deal.get("price_ton") is not None:
            parts.append(f"‚Ä¢ –¶–µ–Ω–∞: <b>{deal['price_ton']:.4f} TON</b>")
        if deal.get("discount") is not None:
            parts.append(f"‚Ä¢ –°–∫–∏–¥–∫–∞: <b>{deal['discount']:.1f}%</b>")
        if deal.get("url"):
            parts.append(f"\n‚û°Ô∏è <a href=\"{deal['url']}\">–û—Ç–∫—Ä—ã—Ç—å –≤ Tonviewer</a>")

        text = "\n".join(parts)
        await bot.send_message(user_id, text, disable_web_page_preview=True)
    finally:
        await bot.session.close()

async def _scan_once() -> None:
    pool = await get_pool()

    # —Å–æ–±–∏—Ä–∞–µ–º –æ—Ä–¥–µ—Ä–∞ —Å–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    batches: List[List[Dict[str, Any]]] = []

    # dTON (–∞–∫—Ç–∏–≤–µ–Ω)
    try:
        dton = await _fetch_from_dton()
        batches.append(dton)
    except Exception as e:
        log.warning("dTON fetch failed: %s", e)

    # –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
    try:
        tonapi = await _fetch_from_tonapi_rest()
        batches.append(tonapi)
    except Exception as e:
        log.warning("TonAPI REST fetch failed: %s", e)

    try:
        gg = await _fetch_from_getgems()
        batches.append(gg)
    except Exception as e:
        log.warning("Getgems fetch failed: %s", e)

    # –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ deal_id
    all_items = [it for batch in batches for it in (batch or [])]
    uniq: Dict[str, Dict[str, Any]] = {}
    for it in all_items:
        did = it.get("deal_id")
        if not did:
            continue
        uniq[did] = it

    log.info("–°—É–º–º–∞—Ä–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ %d / —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö %d –æ—Ä–¥–µ—Ä–æ–≤", len(all_items), len(uniq))

    if not uniq:
        log.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–µ—Ä–Ω—É–ª–∏ –ø—É—Å—Ç–æ.")
        return

    users = await get_scanner_users(pool)
    if not users:
        return

    for deal in uniq.values():
        # –∞–Ω—Ç–∏–¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î
        if await was_deal_seen(pool, deal["deal_id"]):
            continue

        # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        for uid in users:
            st = await get_or_create_scanner_settings(pool, uid)
            if _passes_user_filters(deal, st):
                await _notify_user(uid, deal)

        # –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        await mark_deal_seen(pool, deal)

async def scanner_loop():
    log.info("Scanner loop started")
    while True:
        try:
            await _scan_once()
        except Exception as e:
            log.exception("scanner tick failed: %s", e)
        await asyncio.sleep(POLL_SECONDS)
