# handlers.py
from decimal import Decimal, InvalidOperation
from typing import Any, Dict, Optional

from aiogram import Dispatcher, types
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)

from db import (
    get_or_create_scanner_settings,  # (user_id)
    get_wallet,                      # ()
    set_wallet,                      # (user_id, address)
    update_scanner_settings,         # (user_id, **kwargs)
    set_scanner_enabled,             # (user_id, enabled)
)

# ------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# ------------------------------------------------------------

def _main_reply_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üèÅ –°—Ç–∞—Ä—Ç"))
    kb.add(KeyboardButton("üëõ –ö–æ—à–µ–ª—ë–∫"), KeyboardButton("üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–µ—Ä–∞"))
    kb.add(KeyboardButton("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫–∞–Ω–µ—Ä"), KeyboardButton("‚è∏ –í—ã–∫–ª—é—á–∏—Ç—å —Å–∫–∞–Ω–µ—Ä"))
    kb.add(KeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å"))
    return kb


def _format_scanner_settings(st: Dict[str, Any]) -> str:
    def fmt_ton(v: Optional[Decimal]) -> str:
        if v is None:
            return "–Ω–µ—Ç"
        try:
            return f"{float(v):.3f} TON"
        except Exception:
            return str(v)

    parts = [
        f"–°–∫–∞–Ω–µ—Ä: {'–≤–∫–ª—é—á–µ–Ω' if st.get('enabled') or st.get('scanner_enabled') else '–≤—ã–∫–ª—é—á–µ–Ω'}",
        f"–°–∫–∏–¥–∫–∞ (–º–∏–Ω): {float(st.get('min_discount_pct') or st.get('min_discount') or 0):.0f} %",
        f"–¶–µ–Ω–∞ (–º–∏–Ω): {fmt_ton(Decimal(str(st.get('min_price_ton'))) if st.get('min_price_ton') is not None else None)}",
        f"–¶–µ–Ω–∞ (–º–∞–∫—Å): {fmt_ton(Decimal(str(st.get('max_price_ton'))) if st.get('max_price_ton') is not None else None)}",
        f"–ö–æ–ª–ª–µ–∫—Ü–∏–∏: {', '.join(st.get('collections') or []) if st.get('collections') else '–≤—Å–µ'}",
        f"–ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {int(st.get('poll_seconds') or 60)}s",
    ]
    return "\n".join(parts)


async def _ensure_user_settings(user_id: int) -> Dict[str, Any]:
    st = await get_or_create_scanner_settings(user_id)
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é / –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∫ –æ–∂–∏–¥–∞–µ–º—ã–º
    st.setdefault("enabled", False)
    st.setdefault("min_discount_pct", st.get("min_discount", 20))
    st.setdefault("min_price_ton", None)
    st.setdefault("max_price_ton", None)
    st.setdefault("collections", [])
    st.setdefault("poll_seconds", 60)
    return st


# ------------------------------------------------------------
# –ö–æ–º–∞–Ω–¥—ã –∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã
# ------------------------------------------------------------

async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø NFT-–±–æ—Ç. –°–ª–µ–∂—É –∑–∞ –≤—ã–≥–æ–¥–Ω—ã–º–∏ –ª–æ—Ç–∞–º–∏ –Ω–∞ TON-–º–∞—Ä–∫–µ—Ç–∞—Ö –∏ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=_main_reply_kb(),
    )


async def cmd_status(message: types.Message):
    user_id = message.from_user.id
    st = await _ensure_user_settings(user_id)
    wallet = await get_wallet()
    wallet_str = wallet or "–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    text = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üëõ –ö–æ—à–µ–ª—ë–∫: <code>{wallet_str}</code>\n\n"
        f"üõ† –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–µ—Ä–∞:\n{_format_scanner_settings(st)}"
    )
    await message.answer(text, reply_markup=_main_reply_kb())


async def cmd_wallet(message: types.Message):
    wallet = await get_wallet()
    if wallet:
        await message.answer(
            f"–¢–µ–∫—É—â–∏–π TON-–∞–¥—Ä–µ—Å: <code>{wallet}</code>\n"
            f"–ß—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=_main_reply_kb(),
        )
    else:
        await message.answer(
            "–ö–æ—à–µ–ª—ë–∫ –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –û—Ç–ø—Ä–∞–≤—å TON-–∞–¥—Ä–µ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —è —Å–æ—Ö—Ä–∞–Ω—é.",
            reply_markup=_main_reply_kb(),
        )


async def on_plain_address(message: types.Message):
    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ TON-–∞–¥—Ä–µ—Å–∞ (friendly/raw)
    text = (message.text or "").strip()
    if len(text) < 48 or len(text) > 80:
        return
    if not any(ch.isalnum() for ch in text):
        return
    await set_wallet(message.from_user.id, text)
    await message.answer(
        f"–°–æ—Ö—Ä–∞–Ω–∏–ª TON-–∞–¥—Ä–µ—Å: <code>{text}</code>",
        reply_markup=_main_reply_kb(),
    )


async def cmd_scanner_settings(message: types.Message):
    user_id = message.from_user.id
    st = await _ensure_user_settings(user_id)

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("–ú–∏–Ω. —Å–∫–∏–¥–∫–∞ ‚àí5%", callback_data="min_disc:-5"),
        InlineKeyboardButton("–ú–∏–Ω. —Å–∫–∏–¥–∫–∞ +5%", callback_data="min_disc:+5"),
    )
    kb.add(
        InlineKeyboardButton("–ú–∏–Ω. —Ü–µ–Ω–∞ ‚àí0.5 TON", callback_data="min_price:-0.5"),
        InlineKeyboardButton("–ú–∏–Ω. —Ü–µ–Ω–∞ +0.5 TON", callback_data="min_price:+0.5"),
    )
    kb.add(
        InlineKeyboardButton("–ú–∞–∫—Å. —Ü–µ–Ω–∞ ‚àí0.5 TON", callback_data="max_price:-0.5"),
        InlineKeyboardButton("–ú–∞–∫—Å. —Ü–µ–Ω–∞ +0.5 TON", callback_data="max_price:+0.5"),
    )
    kb.add(
        InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–≤–∞–ª ‚àí10s", callback_data="poll:-10"),
        InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–≤–∞–ª +10s", callback_data="poll:+10"),
    )
    kb.add(InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="cols:clear"))

    await message.answer(
        "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–µ—Ä–∞:\n"
        + _format_scanner_settings(st)
        + "\n\n–ü–æ–¥–ø—Ä–∞–≤—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
        reply_markup=kb,
    )


async def cb_settings(call: types.CallbackQuery):
    user_id = call.from_user.id
    st = await _ensure_user_settings(user_id)
    data = call.data or ""

    try:
        if data.startswith("min_disc:"):
            delta = int(data.split(":", 1)[1])
            cur = int(st.get("min_discount_pct") or 0)
            cur = max(0, min(90, cur + delta))
            st["min_discount_pct"] = cur
            await update_scanner_settings(user_id, min_discount=cur)

        elif data.startswith("min_price:"):
            delta = Decimal(data.split(":", 1)[1])
            cur_raw = st.get("min_price_ton")
            cur = Decimal(str(cur_raw)) if cur_raw is not None else Decimal("0")
            cur = max(Decimal("0"), cur + delta)
            st["min_price_ton"] = str(cur)
            await update_scanner_settings(user_id, min_price_ton=str(cur))

        elif data.startswith("max_price:"):
            delta = Decimal(data.split(":", 1)[1])
            cur_raw = st.get("max_price_ton")
            cur = Decimal(str(cur_raw)) if cur_raw is not None else Decimal("0")
            cur = max(Decimal("0"), cur + delta)
            st["max_price_ton"] = str(cur)
            await update_scanner_settings(user_id, max_price_ton=str(cur))

        elif data.startswith("poll:"):
            delta = int(data.split(":", 1)[1])
            cur = int(st.get("poll_seconds") or 60)
            cur = max(10, min(3600, cur + delta))
            st["poll_seconds"] = cur
            await update_scanner_settings(user_id, poll_seconds=cur)

        elif data == "cols:clear":
            st["collections"] = []
            await update_scanner_settings(user_id, collections=[])

        await call.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")
        await call.message.edit_text(
            "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n" + _format_scanner_settings(st),
            reply_markup=call.message.reply_markup,
        )
    except InvalidOperation:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", show_alert=True)


async def cmd_scanner_on(message: types.Message):
    user_id = message.from_user.id
    await set_scanner_enabled(user_id, True)
    await message.answer("–°–∫–∞–Ω–µ—Ä –≤–∫–ª—é—á–µ–Ω ‚úÖ", reply_markup=_main_reply_kb())


async def cmd_scanner_off(message: types.Message):
    user_id = message.from_user.id
    await set_scanner_enabled(user_id, False)
    await message.answer("–°–∫–∞–Ω–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω ‚è∏", reply_markup=_main_reply_kb())


# ------------------------------------------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
# ------------------------------------------------------------

def register_handlers(dp: Dispatcher) -> None:
    dp.register_message_handler(cmd_start, commands={"start"})
    dp.register_message_handler(cmd_status, lambda m: m.text == "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å")
    dp.register_message_handler(cmd_wallet, lambda m: m.text == "üëõ –ö–æ—à–µ–ª—ë–∫")
    dp.register_message_handler(cmd_scanner_settings, lambda m: m.text == "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–µ—Ä–∞")
    dp.register_message_handler(cmd_scanner_on, lambda m: m.text == "‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫–∞–Ω–µ—Ä")
    dp.register_message_handler(cmd_scanner_off, lambda m: m.text == "‚è∏ –í—ã–∫–ª—é—á–∏—Ç—å —Å–∫–∞–Ω–µ—Ä")
    dp.register_message_handler(cmd_start, lambda m: m.text == "üèÅ –°—Ç–∞—Ä—Ç")
    dp.register_message_handler(on_plain_address, content_types=types.ContentTypes.TEXT)
    dp.register_callback_query_handler(cb_settings, lambda c: (c.data or "").split(":")[0] in {
        "min_disc", "min_price", "max_price", "poll", "cols"
    })
