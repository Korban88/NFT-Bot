# handlers.py
import asyncio
import os
import uuid
import hashlib
from datetime import datetime, timedelta, timezone
from typing import Optional, Tuple, Dict, Any, List
from urllib.parse import quote
from decimal import Decimal, InvalidOperation

import httpx
import asyncpg
from aiogram import Dispatcher, types, Bot
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)

from config import settings
from db import (
    get_pool, set_wallet, get_wallet,
    get_or_create_scanner_settings, update_scanner_settings,
    set_scanner_enabled, get_scanner_users,
    was_deal_seen, mark_deal_seen
)

# ======== –ö–æ–Ω—Ñ–∏–≥ ========
PAYMENT_TTL_MIN = int(os.getenv("PAYMENT_TTL_MIN", "30"))
TON_DECIMALS = Decimal(10**9)

SOURCE_DRIVER = os.getenv("SOURCE_DRIVER", "json").strip().lower()  # json | tonapi
LISTINGS_FEED_URL = os.getenv("LISTINGS_FEED_URL", "").strip()
TON_COLLECTIONS = [c.strip() for c in os.getenv("TON_COLLECTIONS", "").split(",") if c.strip()]

SCAN_INTERVAL_SEC = int(os.getenv("SCAN_INTERVAL_SEC", "60"))
SCAN_LOOKBACK_MIN = int(os.getenv("SCAN_LOOKBACK_MIN", "1440"))  # 24h
SCAN_PUSH_LIMIT = int(os.getenv("SCAN_PUSH_LIMIT", "5"))
SCAN_COLD_START_SKIP_SEND = (os.getenv("SCAN_COLD_START_SKIP_SEND", "true").lower() == "true")

ADMIN_ID = int(os.getenv("ADMIN_TELEGRAM_ID", "347552741"))

# –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–ª–∞–≥ ¬´–ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥¬ª
_COLD_START = True

# ======== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ========
def main_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ö—É–ø–∏—Ç—å NFT"))
    kb.add(KeyboardButton("–û –∫–æ–ª–ª–µ–∫—Ü–∏–∏"))
    kb.add(KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))
    return kb

def _now_utc() -> datetime:
    return datetime.now(tz=timezone.utc)

# ======== –ü–ª–∞—Ç–µ–∂–∏ ========
def gen_comment() -> str:
    return "nftbot-" + uuid.uuid4().hex[:12]

def build_ton_transfer_link(address: str, amount_ton: Decimal, comment: str) -> str:
    nanotons = int(amount_ton * TON_DECIMALS)
    safe_comment = comment[:120]
    return f"ton://transfer/{address}?amount={nanotons}&text={safe_comment}"

def build_tonkeeper_link(address: str, amount_ton: Decimal, comment: str) -> str:
    nanotons = int(amount_ton * TON_DECIMALS)
    return f"https://app.tonkeeper.com/transfer/{address}?amount={nanotons}&text={quote(comment)}"

def build_tonhub_link(address: str, amount_ton: Decimal, comment: str) -> str:
    nanotons = int(amount_ton * TON_DECIMALS)
    return f"https://tonhub.com/transfer/{address}?amount={nanotons}&text={quote(comment)}"

MIN_PAYMENT_TON = Decimal(os.getenv("MIN_PAYMENT_TON", "0.1"))

# ======== –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã ========
async def start_handler(m: types.Message, pool: asyncpg.Pool):
    await m.answer(
        "NFT –ë–æ—Ç: —Å–∫–∞–Ω–µ—Ä –≤—ã–≥–æ–¥–Ω—ã—Ö –ª–æ—Ç–æ–≤ –∏ –≤–∏—Ç—Ä–∏–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/pay ‚Äî –æ–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞\n"
        "/scanner_on, /scanner_off, /scanner_settings, /scanner_reset\n"
        "/set_discount, /set_maxprice, /set_collections\n"
        "/scanner_test, /scanner_source, /scanner_ping",
        reply_markup=main_kb()
    )

async def set_wallet_handler(m: types.Message, pool: asyncpg.Pool):
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å: /set_wallet EQ... –∏–ª–∏ UQ...")
        return
    addr = parts[1].strip()
    await set_wallet(pool, addr)
    await m.answer("–ê–¥—Ä–µ—Å –ø—Ä–∏—ë–º–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.")

async def health_handler(m: types.Message, pool: asyncpg.Pool):
    ok = bool(settings.TONAPI_KEY)
    wa = await get_wallet(pool)
    tail = (wa[-6:] if wa else "‚Äî")
    head = (wa[:6] if wa else "")
    await m.answer(f"Health:\nTonAPI: {'ok' if ok else 'fail'}\nWallet: {head}‚Ä¶{tail}")

async def pay_handler(m: types.Message, bot: Bot, pool: asyncpg.Pool):
    wallet = await get_wallet(pool)
    if not wallet:
        await m.answer("–ê–¥—Ä–µ—Å –ø—Ä–∏—ë–º–∞ –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏ –µ–≥–æ: /set_wallet <–∞–¥—Ä–µ—Å TON>")
        return
    comment = gen_comment()
    ton_link = build_ton_transfer_link(wallet, MIN_PAYMENT_TON, comment)
    tk_link = build_tonkeeper_link(wallet, MIN_PAYMENT_TON, comment)
    th_link = build_tonhub_link(wallet, MIN_PAYMENT_TON, comment)

    async with pool.acquire() as con:
        await con.execute(
            "INSERT INTO app_payments (id, user_id, comment, amount_ton, status) VALUES ($1,$2,$3,$4,'pending')",
            uuid.uuid4(), m.from_user.id, comment, float(MIN_PAYMENT_TON)
        )

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("Tonkeeper", url=tk_link),
        InlineKeyboardButton("Tonhub", url=th_link),
    )
    msg = (
        "–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞.\n\n"
        f"–°—É–º–º–∞: {MIN_PAYMENT_TON} TON –∏–ª–∏ –±–æ–ª—å—à–µ\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{comment}`\n"
        f"–ê–¥—Ä–µ—Å: `{wallet}`\n"
        f"–°—Å—ã–ª–∫–∞: {ton_link}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª.")
    await m.answer(msg, parse_mode="Markdown", reply_markup=kb)

# ======== –õ–æ—Ç—ã: —Ä–∞—Å—á—ë—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—ã ========
def _safe_decimal(x) -> Optional[Decimal]:
    try:
        if x is None:
            return None
        return Decimal(str(x))
    except (InvalidOperation, ValueError):
        return None

def _item_discount(it: Dict[str, Any]) -> Optional[float]:
    p = _safe_decimal(it.get("price_ton"))
    f = _safe_decimal(it.get("floor_ton"))
    if p and f and p > 0 and f > 0:
        return float((f - p) / f * 100)
    return None

def _deal_id(it: Dict[str, Any]) -> str:
    raw = f"{it.get('collection','')}|{it.get('nft_address','')}|{it.get('price_ton','')}"
    return hashlib.sha1(raw.encode("utf-8")).hexdigest()

def _item_matches(it: Dict[str, Any], st: Dict[str, Any]) -> bool:
    # –≤–æ–∑—Ä–∞—Å—Ç
    ts = it.get("timestamp")
    if ts:
        try:
            dt = datetime.fromtimestamp(int(ts), tz=timezone.utc)
            if dt < _now_utc() - timedelta(minutes=SCAN_LOOKBACK_MIN):
                return False
        except Exception:
            pass
    # —Å–∫–∏–¥–∫–∞
    disc = it.get("discount")
    if disc is not None and float(disc) < float(st.get("min_discount") or 0.0):
        return False
    # —Ü–µ–Ω–∞
    maxp = st.get("max_price_ton")
    if maxp is not None:
        try:
            price = float(it.get("price_ton") or 0)
            if price <= 0 or price > float(maxp):
                return False
        except Exception:
            return False
    # –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    cols = st.get("collections") or []
    if cols:
        col = (it.get("collection") or "").strip()
        return any(col.lower() == c.lower().strip() for c in cols)
    return True

def _item_caption(it: Dict[str, Any]) -> str:
    name = it.get("name") or "‚Äî"
    coll = it.get("collection") or "‚Äî"
    price = it.get("price_ton")
    floor = it.get("floor_ton")
    disc = it.get("discount")
    url = it.get("url") or "‚Äî"
    lines = [f"üî• {name}", f"–ö–æ–ª–ª–µ–∫—Ü–∏—è: {coll}"]
    if price is not None:
        try:
            lines.append(f"–¶–µ–Ω–∞: {float(price):.3f} TON")
        except Exception:
            lines.append(f"–¶–µ–Ω–∞: {price} TON")
    if floor is not None:
        try:
            lines.append(f"Floor: {float(floor):.3f} TON")
        except Exception:
            lines.append(f"Floor: {floor} TON")
    if disc is not None:
        lines.append(f"–°–∫–∏–¥–∫–∞: {float(disc):.1f}%")
    lines.append(url)
    return "\n".join(lines)

async def send_item_alert(bot: Bot, user_id: int, it: Dict[str, Any]):
    kb = InlineKeyboardMarkup(row_width=2)
    if it.get("url"):
        kb.insert(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç", url=it["url"]))
    if it.get("gg_url"):
        kb.insert(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Getgems", url=it["gg_url"]))
    caption = _item_caption(it)
    img = (it.get("image") or "").strip()
    if img:
        try:
            await bot.send_photo(user_id, img, caption=caption, reply_markup=kb)
            return
        except Exception:
            pass
    await bot.send_message(user_id, caption, reply_markup=kb)

# ======== –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö ========
def _tonviewer_url(addr: str) -> str:
    return f"https://tonviewer.com/{addr}"

def _getgems_url(addr: str) -> str:
    return f"https://getgems.io/nft/{addr}"

def _parse_iso_ts(s: Optional[str]) -> Optional[int]:
    if not s:
        return None
    try:
        # "2024-06-20T12:34:56Z" –∏–ª–∏ –±–µ–∑ Z
        s2 = s.replace("Z", "+00:00") if s.endswith("Z") else s
        return int(datetime.fromisoformat(s2).timestamp())
    except Exception:
        return None

async def _fetch_from_json_feed() -> List[Dict[str, Any]]:
    if not LISTINGS_FEED_URL:
        return []
    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            r = await client.get(LISTINGS_FEED_URL)
        if r.status_code != 200:
            return []
        data = r.json()
        if isinstance(data, list):
            return data
        if isinstance(data, dict) and isinstance(data.get("items"), list):
            return data["items"]
        return []
    except Exception:
        return []

async def _fetch_from_tonapi() -> List[Dict[str, Any]]:
    """
    –ë–µ—Ä—ë–º –¢–û–õ–¨–ö–û NFT, –∫–æ—Ç–æ—Ä—ã–µ –≤ –ø—Ä–æ–¥–∞–∂–µ (–µ—Å—Ç—å sale).
    –°—Å—ã–ª–∫–∞ –≤—Å–µ–≥–¥–∞ tonviewer; –∫–Ω–æ–ø–∫—É Getgems –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ marketplace = getgems.
    –ü–æ—Å–ª–µ fetch —Å—á–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π floor –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ discount.
    """
    if not TON_COLLECTIONS:
        return []
    headers = {}
    if getattr(settings, "TONAPI_KEY", None):
        headers["Authorization"] = f"Bearer {settings.TONAPI_KEY}"

    rows: List[Dict[str, Any]] = []
    try:
        async with httpx.AsyncClient(timeout=20.0, headers=headers) as client:
            total_cap = 120  # –æ–±—â–∏–π –∫–æ–ª–ø–∞–∫ –Ω–∞ –æ–¥–Ω—É –≤—ã–±–æ—Ä–∫—É
            for coll_addr in TON_COLLECTIONS:
                if total_cap <= 0:
                    break
                url = f"https://tonapi.io/v2/nfts/collections/{coll_addr}/items?limit=50&offset=0"
                r = await client.get(url)
                if r.status_code != 200:
                    continue
                data = r.json() or {}
                items = data.get("nft_items") or data.get("items") or []

                for it in items:
                    sale = it.get("sale") or it.get("marketplace")
                    if not isinstance(sale, dict):
                        continue  # —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–æ

                    addr = it.get("address") or ""
                    if not addr:
                        continue

                    # —Ü–µ–Ω–∞
                    price_ton = None
                    raw_price = sale.get("price") or sale.get("full_price") or sale.get("amount")
                    d = _safe_decimal(raw_price)
                    if d and d > 0:
                        price_ton = float(d / TON_DECIMALS)

                    # –ø—Ä–µ–≤—å—é
                    img = None
                    previews = it.get("previews") or []
                    if isinstance(previews, list) and previews:
                        img = previews[-1].get("url") or previews[0].get("url")

                    name = (it.get("metadata") or {}).get("name") or addr

                    # –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    ts = _parse_iso_ts(sale.get("created_at")) or _parse_iso_ts(it.get("created_at")) \
                         or int(_now_utc().timestamp())

                    # —Å—Å—ã–ª–∫–∏
                    url_view = _tonviewer_url(addr)
                    gg_url = None
                    market_name = (sale.get("marketplace") or {}).get("name") if isinstance(sale.get("marketplace"), dict) else sale.get("market") or sale.get("name")
                    if isinstance(market_name, str) and "getgems" in market_name.lower():
                        gg_url = _getgems_url(addr)

                    rows.append({
                        "name": name,
                        "collection": coll_addr,
                        "nft_address": addr,
                        "price_ton": price_ton,
                        "floor_ton": None,   # –∑–∞–ø–æ–ª–Ω–∏–º –Ω–∏–∂–µ
                        "discount": None,    # –∑–∞–ø–æ–ª–Ω–∏–º –Ω–∏–∂–µ
                        "timestamp": ts,
                        "url": url_view,
                        "gg_url": gg_url,
                        "image": img,
                    })
                    total_cap -= 1
                    if total_cap <= 0:
                        break
    except Exception:
        return []

    # –õ–æ–∫–∞–ª—å–Ω—ã–π floor –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ >0
    by_coll: Dict[str, List[float]] = {}
    for x in rows:
        p = _safe_decimal(x.get("price_ton"))
        if p and p > 0:
            by_coll.setdefault(x["collection"], []).append(float(p))

    floors: Dict[str, float] = {c: min(v) for c, v in by_coll.items() if v}

    for x in rows:
        floor = floors.get(x["collection"])
        if floor:
            x["floor_ton"] = floor
            # —Å–∫–∏–¥–∫–∞ (–µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∏–∂–µ floor, –±—É–¥–µ—Ç >0)
            try:
                if x.get("price_ton") and floor > 0:
                    x["discount"] = float((floor - float(x["price_ton"])) / floor * 100.0)
            except Exception:
                pass

    return rows

async def fetch_listings() -> List[Dict[str, Any]]:
    if SOURCE_DRIVER == "tonapi":
        return await _fetch_from_tonapi()
    return await _fetch_from_json_feed()

# ======== –û—Ç–±–æ—Ä –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ========
def _rank_items(items: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–∏–¥–∫–µ (None –≤ –∫–æ–Ω–µ—Ü), –∑–∞—Ç–µ–º –ø–æ —Ü–µ–Ω–µ (–¥–µ—à–µ–≤–ª–µ –≤—ã—à–µ)
    def key(it):
        disc = it.get("discount")
        # None -> -inf, —á—Ç–æ–±—ã —É–ª–µ—Ç–µ–ª–æ –≤–Ω–∏–∑
        disc_key = -9999.0 if disc is None else float(disc)
        price = it.get("price_ton")
        price_key = 9999999.0 if price is None else float(price)
        # —Ö–æ—Ç–∏–º —Å–∫–∏–¥–∫—É –ø–æ —É–±—ã–≤–∞–Ω–∏—é ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
        return (-disc_key, price_key)
    return sorted(items, key=key)

# ======== –ë—ã—Å—Ç—Ä—ã–π —Å–∫–∞–Ω ========
async def quick_scan_for_user(bot: Bot, user_id: int, pool: asyncpg.Pool, max_items: int = 3) -> int:
    items = await fetch_listings()
    if not items:
        await bot.send_message(user_id, "–§–∏–¥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return 0

    st = await get_or_create_scanner_settings(pool, user_id)
    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—ã–≥–æ–¥–µ
    cand = [it for it in items if _item_matches(it, st)]
    cand = _rank_items(cand)

    sent = 0
    for it in cand:
        it = dict(it)
        it["deal_id"] = _deal_id(it)
        if await was_deal_seen(pool, it["deal_id"]):
            continue
        await send_item_alert(bot, user_id, it)
        await mark_deal_seen(pool, it)
        sent += 1
        if sent >= max_items:
            break

    if sent == 0:
        await bot.send_message(user_id, "–°–µ–π—á–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª–æ—Ç–æ–≤ –Ω–µ—Ç.")
    return sent

# ======== –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ========
async def scanner_loop(bot: Bot, pool: asyncpg.Pool):
    global _COLD_START
    await asyncio.sleep(3)
    while True:
        try:
            items = await fetch_listings()
            if not items:
                await asyncio.sleep(SCAN_INTERVAL_SEC); continue

            users = await get_scanner_users(pool)
            if not users:
                await asyncio.sleep(SCAN_INTERVAL_SEC); continue

            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Å–≤–æ–π —Ñ–∏–ª—å—Ç—Ä –∏ –ª–∏–º–∏—Ç, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—ã–≥–æ–¥–µ
            for uid in users:
                st = await get_or_create_scanner_settings(pool, uid)
                cand = [it for it in items if _item_matches(it, st)]
                cand = _rank_items(cand)

                pushed = 0
                for it in cand:
                    it = dict(it)
                    it["deal_id"] = _deal_id(it)
                    if await was_deal_seen(pool, it["deal_id"]):
                        continue

                    if _COLD_START and SCAN_COLD_START_SKIP_SEND:
                        # —Ç–æ–ª—å–∫–æ –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —É—Å—Ç—Ä–æ–∏—Ç—å ¬´–ª–∞–≤–∏–Ω—É¬ª –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
                        await mark_deal_seen(pool, it)
                        continue

                    await send_item_alert(bot, uid, it)
                    await mark_deal_seen(pool, it)
                    pushed += 1
                    if pushed >= SCAN_PUSH_LIMIT:
                        break

            _COLD_START = False  # –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–∂–Ω–æ —Å–ª–∞—Ç—å

            await asyncio.sleep(SCAN_INTERVAL_SEC)
        except Exception:
            await asyncio.sleep(SCAN_INTERVAL_SEC)

# ======== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ========
def _settings_text(st: Dict[str, Any]) -> str:
    min_disc = float(st["min_discount"])
    max_price = st["max_price_ton"]
    cols = st["collections"]
    max_price_text = "–Ω–µ—Ç" if max_price is None else f"{float(max_price):.3f} TON"
    cols_text = "–ª—é–±–æ–π" if not cols else ", ".join(cols)
    src = "TonAPI (—Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–¥–∞–∂–µ, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∫–∏–¥–∫–µ, —Å—Å—ã–ª–∫–∏ ‚Äî tonviewer)" if SOURCE_DRIVER == "tonapi" else (LISTINGS_FEED_URL or "JSON-—Ñ–∏–¥ –Ω–µ –∑–∞–¥–∞–Ω")
    return (
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: {src}\n"
        f"–õ–∏–º–∏—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞ —Ü–∏–∫–ª: {SCAN_PUSH_LIMIT}\n"
        f"–•–æ–ª–æ–¥–Ω—ã–π —Å—Ç–∞—Ä—Ç: {'skip' if SCAN_COLD_START_SKIP_SEND else 'send'}\n\n"
        "–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–∫–∞–Ω–µ—Ä–∞:\n"
        f"‚Äî –ú–∏–Ω. —Å–∫–∏–¥–∫–∞: {min_disc:.1f}%\n"
        f"‚Äî –ú–∞–∫—Å. —Ü–µ–Ω–∞: {max_price_text}\n"
        f"‚Äî –ö–æ–ª–ª–µ–∫—Ü–∏–∏: {cols_text}\n\n"
        "–ò–∑–º–µ–Ω–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:"
    )

def _settings_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚àí5% —Å–∫–∏–¥–∫–∏", callback_data="cfg:disc:-5"),
        InlineKeyboardButton("+5% —Å–∫–∏–¥–∫–∏", callback_data="cfg:disc:+5"),
    )
    kb.add(
        InlineKeyboardButton("–¶–µ–Ω–∞ ‚â§ 10 TON", callback_data="cfg:max:10"),
        InlineKeyboardButton("–°–Ω—è—Ç—å –ª–∏–º–∏—Ç —Ü–µ–Ω—ã", callback_data="cfg:max:none"),
    )
    kb.add(
        InlineKeyboardButton("–ö–æ–ª–ª–µ–∫—Ü–∏–∏: FLIGHT", callback_data="cfg:cols:FLIGHT"),
        InlineKeyboardButton("–ö–æ–ª–ª–µ–∫—Ü–∏–∏: –ª—é–±–æ–π", callback_data="cfg:cols:none"),
    )
    kb.add(InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data="cfg:refresh"))
    return kb

async def scanner_settings_handler(m: types.Message, pool: asyncpg.Pool):
    st = await get_or_create_scanner_settings(pool, m.from_user.id)
    await m.answer(_settings_text(st), reply_markup=_settings_kb())

async def _apply_cfg_action(user_id: int, action: str):
    pool = await get_pool()
    key, _, val = action.partition(":")
    if key == "disc":
        st = await get_or_create_scanner_settings(pool, user_id)
        cur = float(st["min_discount"] or 0.0)
        delta = 5.0 if val == "+5" else -5.0
        newv = max(0.0, min(90.0, cur + delta))
        await update_scanner_settings(pool, user_id, min_discount=newv)
    elif key == "max":
        if val == "none":
            await update_scanner_settings(pool, user_id, max_price_ton=None)
        else:
            try:
                await update_scanner_settings(pool, user_id, max_price_ton=float(val))
            except Exception:
                pass
    elif key == "cols":
        if val == "none":
            await update_scanner_settings(pool, user_id, collections=None)
        else:
            await update_scanner_settings(pool, user_id, collections=[val])

async def cb_settings(call: types.CallbackQuery):
    try:
        _, action = call.data.split("cfg:", 1)
    except Exception:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return

    await _apply_cfg_action(call.from_user.id, action)
    pool = await get_pool()
    st = await get_or_create_scanner_settings(pool, call.from_user.id)

    try:
        await call.message.edit_text(_settings_text(st), reply_markup=_settings_kb())
    except Exception:
        await call.message.answer(_settings_text(st), reply_markup=_settings_kb())

    if action == "refresh":
        bot = call.message.bot
        await quick_scan_for_user(bot, call.from_user.id, pool, max_items=3)

    await call.answer("–ì–æ—Ç–æ–≤–æ")

# ======== –ö–æ–º–∞–Ω–¥—ã —Å–∫–∞–Ω–µ—Ä–∞ ========
async def scanner_on_handler(m: types.Message, pool: asyncpg.Pool):
    await set_scanner_enabled(pool, m.from_user.id, True)
    await m.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á—ë–Ω. –£–≤–µ–¥–æ–º–ª—é –æ –≤—ã–≥–æ–¥–Ω—ã—Ö –ª–æ—Ç–∞—Ö.", reply_markup=main_kb())

async def scanner_off_handler(m: types.Message, pool: asyncpg.Pool):
    await set_scanner_enabled(pool, m.from_user.id, False)
    await m.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω.", reply_markup=main_kb())

async def set_discount_handler(m: types.Message, pool: asyncpg.Pool):
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–£–∫–∞–∂–∏ –∑–Ω–∞—á–µ–Ω–∏–µ: /set_discount 30")
        return
    try:
        val = float(parts[1].replace(",", "."))
    except Exception:
        await m.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–∏–º–µ—Ä: /set_discount 30")
        return
    await update_scanner_settings(pool, m.from_user.id, min_discount=val)
    await m.answer("–ú–∏–Ω. —Å–∫–∏–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

async def set_maxprice_handler(m: types.Message, pool: asyncpg.Pool):
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await update_scanner_settings(pool, m.from_user.id, max_price_ton=None)
        await m.answer("–õ–∏–º–∏—Ç —Ü–µ–Ω—ã —Å–Ω—è—Ç.")
        return
    try:
        val = float(parts[1].replace(",", "."))
    except Exception:
        await m.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–∏–º–µ—Ä: /set_maxprice 12.5")
        return
    await update_scanner_settings(pool, m.from_user.id, max_price_ton=val)
    await m.answer("–ú–∞–∫—Å. —Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

async def set_collections_handler(m: types.Message, pool: asyncpg.Pool):
    parts = (m.text or "").split(maxsplit=1)
    cols: Optional[List[str]] = None
    if len(parts) >= 2:
        cols = [c.strip() for c in parts[1].split(",") if c.strip()]
    await update_scanner_settings(pool, m.from_user.id, collections=cols)
    await m.answer("–°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω.")

async def scanner_test_handler(m: types.Message, bot: Bot, pool: asyncpg.Pool):
    items = await fetch_listings()
    if not items:
        await m.answer("–§–∏–¥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–∞—Å—Ç—Ä–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫).")
        return
    st = await get_or_create_scanner_settings(pool, m.from_user.id)
    cand = _rank_items([it for it in items if _item_matches(it, st)])
    sent = 0
    for it in cand[:5]:
        it = dict(it)
        it["deal_id"] = _deal_id(it)
        if await was_deal_seen(pool, it["deal_id"]):
            continue
        await send_item_alert(bot, m.from_user.id, it)
        await mark_deal_seen(pool, it)
        sent += 1
    if sent == 0:
        await m.answer("–°–µ–π—á–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª–æ—Ç–æ–≤ –Ω–µ—Ç.")
    else:
        await m.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–æ—Ç–æ–≤: {sent}")

# ======== –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ========
async def scanner_source_handler(m: types.Message):
    if SOURCE_DRIVER == "tonapi":
        src = f"TonAPI (–≤ –ø—Ä–æ–¥–∞–∂–µ, —Å–æ—Ä—Ç. –ø–æ —Å–∫–∏–¥–∫–µ, tonviewer) / –∫–æ–ª–ª–µ–∫—Ü–∏–π: {len(TON_COLLECTIONS)} / –ª–∏–º–∏—Ç: {SCAN_PUSH_LIMIT}"
    else:
        src = LISTINGS_FEED_URL or "‚Äî –Ω–µ –∑–∞–¥–∞–Ω ‚Äî"
    await m.answer(
        "–ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∏–¥–∞:\n"
        f"{src}\n\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∞: {SCAN_INTERVAL_SEC} —Å–µ–∫\n"
        f"–û–∫–Ω–æ —Å–≤–µ–∂–µ—Å—Ç–∏: {SCAN_LOOKBACK_MIN} –º–∏–Ω\n"
        f"–•–æ–ª–æ–¥–Ω—ã–π —Å—Ç–∞—Ä—Ç: {'skip' if SCAN_COLD_START_SKIP_SEND else 'send'}"
    )

async def scanner_ping_handler(m: types.Message):
    try:
        if SOURCE_DRIVER == "tonapi":
            items = await _fetch_from_tonapi()
        else:
            items = await _fetch_from_json_feed()
        n = len(items)
        names = [str((it.get("name") or "‚Äî")) for it in items[:3]]
        await m.answer(f"–ò—Å—Ç–æ—á–Ω–∏–∫ OK. –≠–ª–µ–º–µ–Ω—Ç–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∂–µ): {n}. –ü–µ—Ä–≤—ã–µ: {', '.join(names) if names else '‚Äî'}")
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {type(e).__name__}")

# ======== –°–±—Ä–æ—Å –∞–Ω—Ç–∏–¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–∞–¥–º–∏–Ω) ========
async def scanner_reset_handler(m: types.Message, pool: asyncpg.Pool):
    if m.from_user.id != ADMIN_ID:
        await m.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    async with (await get_pool()).acquire() as con:
        cnt = await con.fetchval("SELECT COUNT(*) FROM app_found_deals")
        await con.execute("TRUNCATE app_found_deals")
    await m.answer(f"–°–±—Ä–æ—à–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {cnt}. –ê–Ω—Ç–∏–¥—É–±–ª–∏–∫–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã.")

# ======== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ========
def register_handlers(dp: Dispatcher, bot: Bot, pool: asyncpg.Pool):
    dp.register_message_handler(lambda m: start_handler(m, pool), commands={"start"})
    dp.register_message_handler(lambda m: set_wallet_handler(m, pool), commands={"set_wallet"})
    dp.register_message_handler(lambda m: health_handler(m, pool), commands={"health"})

    dp.register_message_handler(lambda m, b=bot: pay_handler(m, b, pool), commands={"pay"})

    # —Å–∫–∞–Ω–µ—Ä
    dp.register_message_handler(lambda m: scanner_on_handler(m, pool), commands={"scanner_on"})
    dp.register_message_handler(lambda m: scanner_off_handler(m, pool), commands={"scanner_off"})
    dp.register_message_handler(lambda m: scanner_settings_handler(m, pool), commands={"scanner_settings"})
    dp.register_message_handler(lambda m: set_discount_handler(m, pool), commands={"set_discount"})
    dp.register_message_handler(lambda m: set_maxprice_handler(m, pool), commands={"set_maxprice"})
    dp.register_message_handler(lambda m: set_collections_handler(m, pool), commands={"set_collections"})
    dp.register_message_handler(lambda m, b=bot: scanner_test_handler(m, b, pool), commands={"scanner_test"})
    dp.register_message_handler(lambda m: scanner_reset_handler(m, pool), commands={"scanner_reset"})
    dp.register_message_handler(scanner_source_handler, commands={"scanner_source"})
    dp.register_message_handler(scanner_ping_handler, commands={"scanner_ping"})

    # reply-–∫–Ω–æ–ø–∫–∏
    dp.register_message_handler(lambda m: scanner_on_handler(m, pool), lambda m: m.text == "–ö—É–ø–∏—Ç—å NFT")
    dp.register_message_handler(lambda m: scanner_settings_handler(m, pool), lambda m: m.text == "–û –∫–æ–ª–ª–µ–∫—Ü–∏–∏")

    dp.register_callback_query_handler(cb_settings, lambda c: c.data and c.data.startswith("cfg:"))
