# handlers.py
import asyncio
import os
import uuid
import hashlib
from datetime import datetime, timedelta, timezone
from typing import Optional, Tuple, Dict, Any, List
from urllib.parse import quote
from decimal import Decimal

import httpx
import asyncpg
from aiogram import Dispatcher, types, Bot
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.dispatcher.filters import Command

from config import settings
from db import (
    get_pool, set_wallet, get_wallet,
    get_or_create_scanner_settings, update_scanner_settings,
    set_scanner_enabled, get_scanner_users,
    was_deal_seen, mark_deal_seen
)

# ======== –ö–æ–Ω—Ñ–∏–≥ ========
PAYMENT_TTL_MIN = int(os.getenv("PAYMENT_TTL_MIN", "30"))
LOCAL_TZ_NAME = os.getenv("LOCAL_TZ", "Europe/Moscow")
TON_DECIMALS = Decimal(10**9)

# –°–∫–∞–Ω–µ—Ä
LISTINGS_FEED_URL = os.getenv("LISTINGS_FEED_URL", "").strip()
SCAN_INTERVAL_SEC = int(os.getenv("SCAN_INTERVAL_SEC", "60"))
SCAN_LOOKBACK_MIN = int(os.getenv("SCAN_LOOKBACK_MIN", "180"))

# –ê–¥–º–∏–Ω –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
ADMIN_ID = int(os.getenv("ADMIN_TELEGRAM_ID", "347552741"))

# ======== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ========
def main_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ö—É–ø–∏—Ç—å NFT"))
    kb.add(KeyboardButton("–û –∫–æ–ª–ª–µ–∫—Ü–∏–∏"))
    kb.add(KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))
    return kb

# ======== –£—Ç–∏–ª–∏—Ç—ã ========
def _now_utc() -> datetime:
    return datetime.now(tz=timezone.utc)

# ======== TonAPI/TonCenter –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∫–∞–∫ –±—ã–ª–æ) ========
class TonAPIProvider:
    def __init__(self, api_key: str):
        self.base = "https://tonapi.io/v2/blockchain"
        self.api_key = api_key

    def _headers(self) -> Dict[str, str]:
        return {"Authorization": f"Bearer {self.api_key}"} if self.api_key else {}

    async def convert(self, addr: str) -> Dict[str, str]:
        try:
            url = f"{self.base}/accounts/{addr}/parse"
            async with httpx.AsyncClient(timeout=12.0) as client:
                r = await client.get(url, headers=self._headers())
            if r.status_code != 200:
                return {}
            data = r.json() or {}
            return {
                "bounceable": (data.get("bounceable") or {}).get("b64url") or "",
                "non_bounceable": (data.get("non_bounceable") or {}).get("b64url") or "",
                "raw": data.get("raw") or "",
            }
        except Exception:
            return {}

    async def fetch_tx(self, account_id: str, limit: int) -> Tuple[int, Optional[List[Dict[str, Any]]]]:
        url = f"{self.base}/accounts/{account_id}/transactions?limit={min(limit, 100)}"
        async with httpx.AsyncClient(timeout=15.0) as client:
            r = await client.get(url, headers=self._headers())
        if r.status_code == 200:
            data = r.json() or {}
            return r.status_code, (data.get("transactions", []) or data.get("items", []) or [])
        return r.status_code, None

class TonCenter:
    def __init__(self, api_key: str):
        self.base = "https://toncenter.com/api/v2/"
        self.api_key = api_key

    async def fetch_tx(self, address: str, limit: int) -> Tuple[int, Optional[List[Dict[str, Any]]]]:
        params = {"address": address, "limit": min(limit, 100), "archival": "true"}
        if self.api_key:
            params["api_key"] = self.api_key
        url = self.base + "getTransactions"
        async with httpx.AsyncClient(timeout=15.0) as client:
            r = await client.get(url, params=params)
        if r.status_code == 200:
            data = r.json() or {}
            return r.status_code, data.get("result")
        return r.status_code, None

# ======== –ü–ª–∞—Ç–µ–∂–∏ (—Å—Å—ã–ª–∫–∏) ========
def gen_comment() -> str:
    return "nftbot-" + uuid.uuid4().hex[:12]

def build_ton_transfer_link(address: str, amount_ton: Decimal, comment: str) -> str:
    nanotons = int(amount_ton * TON_DECIMALS)
    safe_comment = comment[:120]
    return f"ton://transfer/{address}?amount={nanotons}&text={safe_comment}"

def build_tonkeeper_link(address: str, amount_ton: Decimal, comment: str) -> str:
    nanotons = int(amount_ton * TON_DECIMALS)
    return f"https://app.tonkeeper.com/transfer/{address}?amount={nanotons}&text={quote(comment)}"

def build_tonhub_link(address: str, amount_ton: Decimal, comment: str) -> str:
    nanotons = int(amount_ton * TON_DECIMALS)
    return f"https://tonhub.com/transfer/{address}?amount={nanotons}&text={quote(comment)}"

MIN_PAYMENT_TON = Decimal(os.getenv("MIN_PAYMENT_TON", "0.1"))

# ======== –ö–æ–º–∞–Ω–¥—ã –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ========
async def start_handler(m: types.Message, pool: asyncpg.Pool):
    await m.answer(
        "NFT –ë–æ—Ç: —Å–∫–∞–Ω–µ—Ä –≤—ã–≥–æ–¥–Ω—ã—Ö –ª–æ—Ç–æ–≤ –∏ –≤–∏—Ç—Ä–∏–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/pay ‚Äî –æ–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞\n"
        "/scanner_on, /scanner_off, /scanner_settings, /scanner_reset\n"
        "/set_discount, /set_maxprice, /set_collections\n"
        "/scanner_test, /scanner_source, /scanner_ping",
        reply_markup=main_kb()
    )

async def set_wallet_handler(m: types.Message, pool: asyncpg.Pool):
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å: /set_wallet EQ... –∏–ª–∏ UQ...")
        return
    addr = parts[1].strip()
    await set_wallet(pool, addr)
    await m.answer("–ê–¥—Ä–µ—Å –ø—Ä–∏—ë–º–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.")

async def health_handler(m: types.Message, pool: asyncpg.Pool):
    ok = bool(settings.TONAPI_KEY)
    wa = await get_wallet(pool)
    tail = (wa[-6:] if wa else "‚Äî")
    head = (wa[:6] if wa else "")
    await m.answer(f"Health:\nTonAPI: {'ok' if ok else 'fail'}\nWallet: {head}‚Ä¶{tail}")

async def pay_handler(m: types.Message, bot: Bot, pool: asyncpg.Pool):
    wallet = await get_wallet(pool)
    if not wallet:
        await m.answer("–ê–¥—Ä–µ—Å –ø—Ä–∏—ë–º–∞ –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏ –µ–≥–æ: /set_wallet <–∞–¥—Ä–µ—Å TON>")
        return
    comment = gen_comment()
    ton_link = build_ton_transfer_link(wallet, MIN_PAYMENT_TON, comment)
    tk_link = build_tonkeeper_link(wallet, MIN_PAYMENT_TON, comment)
    th_link = build_tonhub_link(wallet, MIN_PAYMENT_TON, comment)

    async with pool.acquire() as con:
        await con.execute(
            "INSERT INTO app_payments (id, user_id, comment, amount_ton, status) VALUES ($1,$2,$3,$4,'pending')",
            uuid.uuid4(), m.from_user.id, comment, float(MIN_PAYMENT_TON)
        )

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("Tonkeeper", url=tk_link),
        InlineKeyboardButton("Tonhub", url=th_link),
    )
    msg = (
        "–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞.\n\n"
        f"–°—É–º–º–∞: {MIN_PAYMENT_TON} TON –∏–ª–∏ –±–æ–ª—å—à–µ\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{comment}`\n"
        f"–ê–¥—Ä–µ—Å: `{wallet}`\n"
        f"–°—Å—ã–ª–∫–∞: {ton_link}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª.")
    await m.answer(msg, parse_mode="Markdown", reply_markup=kb)

# ======== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –ª–æ—Ç–æ–≤ ========
def _item_discount(it: Dict[str, Any]) -> Optional[float]:
    try:
        p = Decimal(str(it.get("price_ton")))
        f = Decimal(str(it.get("floor_ton")))
        if p > 0 and f > 0:
            return float((f - p) / f * 100)
    except Exception:
        pass
    return None

def _deal_id(it: Dict[str, Any]) -> str:
    raw = f"{it.get('collection','')}|{it.get('name','')}|{it.get('url','')}|{it.get('price_ton','')}"
    return hashlib.sha1(raw.encode("utf-8")).hexdigest()

def _item_matches(it: Dict[str, Any], st: Dict[str, Any]) -> bool:
    # –≤–æ–∑—Ä–∞—Å—Ç
    ts = it.get("timestamp")
    if ts:
        try:
            dt = datetime.fromtimestamp(int(ts), tz=timezone.utc)
            if dt < _now_utc() - timedelta(minutes=SCAN_LOOKBACK_MIN):
                return False
        except Exception:
            pass
    # —Å–∫–∏–¥–∫–∞
    disc = _item_discount(it)
    if disc is not None and float(disc) < float(st.get("min_discount") or 0.0):
        return False
    # —Ü–µ–Ω–∞
    maxp = st.get("max_price_ton")
    if maxp is not None:
        try:
            price = float(it.get("price_ton") or 0)
            if price <= 0 or price > float(maxp):
                return False
        except Exception:
            return False
    # –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    cols = st.get("collections") or []
    if cols:
        col = (it.get("collection") or "").strip()
        return any(col.lower() == c.lower().strip() for c in cols)
    return True

def _item_caption(it: Dict[str, Any]) -> str:
    name = it.get("name") or "‚Äî"
    coll = it.get("collection") or "‚Äî"
    price = it.get("price_ton")
    floor = it.get("floor_ton")
    disc = _item_discount(it)
    url = it.get("url") or "‚Äî"
    lines = [f"üî• {name}", f"–ö–æ–ª–ª–µ–∫—Ü–∏—è: {coll}"]
    if price is not None:
        lines.append(f"–¶–µ–Ω–∞: {float(price):.3f} TON")
    if floor is not None:
        lines.append(f"Floor: {float(floor):.3f} TON")
    if disc is not None:
        lines.append(f"–°–∫–∏–¥–∫–∞: {float(disc):.1f}%")
    lines.append(url)
    return "\n".join(lines)

async def send_item_alert(bot: Bot, user_id: int, it: Dict[str, Any]):
    kb = InlineKeyboardMarkup()
    if it.get("url"):
        kb.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç", url=it["url"]))
    caption = _item_caption(it)
    img = (it.get("image") or "").strip()
    if img:
        try:
            await bot.send_photo(user_id, img, caption=caption, reply_markup=kb)
            return
        except Exception:
            pass
    await bot.send_message(user_id, caption, reply_markup=kb)

# ======== –ë—ã—Å—Ç—Ä—ã–π —Å–∫–∞–Ω –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª ========
async def quick_scan_for_user(bot: Bot, user_id: int, pool: asyncpg.Pool, max_items: int = 3) -> int:
    items = await fetch_listings()
    if not items:
        await bot.send_message(user_id, "–§–∏–¥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return 0

    st = await get_or_create_scanner_settings(pool, user_id)
    sent = 0
    for it in items:
        it = dict(it)
        it["discount"] = _item_discount(it)
        it["deal_id"] = _deal_id(it)

        if not _item_matches(it, st):
            continue
        if await was_deal_seen(pool, it["deal_id"]):
            continue

        await send_item_alert(bot, user_id, it)
        await mark_deal_seen(pool, it)
        sent += 1
        if sent >= max_items:
            break

    if sent == 0:
        await bot.send_message(user_id, "–°–µ–π—á–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª–æ—Ç–æ–≤ –Ω–µ—Ç.")
    return sent

# ======== –°–∫–∞–Ω–µ—Ä: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–¥–∞ ========
async def fetch_listings() -> List[Dict[str, Any]]:
    """–≠–ª–µ–º–µ–Ω—Ç:
    {"name":"...","collection":"FLIGHT","price_ton":8.5,"floor_ton":12.0,"timestamp":1723380000,"url":"https://...","image":"https://..."}
    """
    if not LISTINGS_FEED_URL:
        return []
    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            r = await client.get(LISTINGS_FEED_URL)
        if r.status_code != 200:
            return []
        data = r.json()
        if isinstance(data, list):
            return data
        if isinstance(data, dict) and isinstance(data.get("items"), list):
            return data["items"]
        return []
    except Exception:
        return []

# ======== –°–∫–∞–Ω–µ—Ä: —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ========
async def scanner_loop(bot: Bot, pool: asyncpg.Pool):
    await asyncio.sleep(3)
    while True:
        try:
            items = await fetch_listings()
            if not items:
                await asyncio.sleep(SCAN_INTERVAL_SEC); continue

            users = await get_scanner_users(pool)
            if not users:
                await asyncio.sleep(SCAN_INTERVAL_SEC); continue

            for it in items:
                it = dict(it)
                it["discount"] = _item_discount(it)
                it["deal_id"] = _deal_id(it)

                if await was_deal_seen(pool, it["deal_id"]):
                    continue

                for uid in users:
                    st = await get_or_create_scanner_settings(pool, uid)
                    if _item_matches(it, st):
                        await send_item_alert(bot, uid, it)

                await mark_deal_seen(pool, it)

            await asyncio.sleep(SCAN_INTERVAL_SEC)
        except Exception:
            await asyncio.sleep(SCAN_INTERVAL_SEC)

# ======== –ö–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ ========
def _settings_text(st: Dict[str, Any]) -> str:
    min_disc = float(st["min_discount"])
    max_price = st["max_price_ton"]
    cols = st["collections"]
    max_price_text = "–Ω–µ—Ç" if max_price is None else f"{float(max_price):.3f} TON"
    cols_text = "–ª—é–±–æ–π" if not cols else ", ".join(cols)
    return (
        "–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–∫–∞–Ω–µ—Ä–∞:\n"
        f"‚Äî –ú–∏–Ω. —Å–∫–∏–¥–∫–∞: {min_disc:.1f}%\n"
        f"‚Äî –ú–∞–∫—Å. —Ü–µ–Ω–∞: {max_price_text}\n"
        f"‚Äî –ö–æ–ª–ª–µ–∫—Ü–∏–∏: {cols_text}\n\n"
        "–ò–∑–º–µ–Ω–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:"
    )

def _settings_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚àí5% —Å–∫–∏–¥–∫–∏", callback_data="cfg:disc:-5"),
        InlineKeyboardButton("+5% —Å–∫–∏–¥–∫–∏", callback_data="cfg:disc:+5"),
    )
    kb.add(
        InlineKeyboardButton("–¶–µ–Ω–∞ ‚â§ 10 TON", callback_data="cfg:max:10"),
        InlineKeyboardButton("–°–Ω—è—Ç—å –ª–∏–º–∏—Ç —Ü–µ–Ω—ã", callback_data="cfg:max:none"),
    )
    kb.add(
        InlineKeyboardButton("–ö–æ–ª–ª–µ–∫—Ü–∏–∏: FLIGHT", callback_data="cfg:cols:FLIGHT"),
        InlineKeyboardButton("–ö–æ–ª–ª–µ–∫—Ü–∏–∏: –ª—é–±–æ–π", callback_data="cfg:cols:none"),
    )
    kb.add(InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data="cfg:refresh"))
    return kb

async def scanner_settings_handler(m: types.Message, pool: asyncpg.Pool):
    st = await get_or_create_scanner_settings(pool, m.from_user.id)
    await m.answer(_settings_text(st), reply_markup=_settings_kb())

async def _apply_cfg_action(user_id: int, action: str):
    # action: "disc:+5" | "disc:-5" | "max:10" | "max:none" | "cols:FLIGHT" | "cols:none" | "refresh"
    pool = await get_pool()
    key, _, val = action.partition(":")
    if key == "disc":
        st = await get_or_create_scanner_settings(pool, user_id)
        cur = float(st["min_discount"] or 0.0)
        delta = 5.0 if val == "+5" else -5.0
        newv = max(0.0, min(90.0, cur + delta))
        await update_scanner_settings(pool, user_id, min_discount=newv)
    elif key == "max":
        if val == "none":
            await update_scanner_settings(pool, user_id, max_price_ton=None)
        else:
            try:
                await update_scanner_settings(pool, user_id, max_price_ton=float(val))
            except Exception:
                pass
    elif key == "cols":
        if val == "none":
            await update_scanner_settings(pool, user_id, collections=None)
        else:
            await update_scanner_settings(pool, user_id, collections=[val])
    # refresh ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º

async def cb_settings(call: types.CallbackQuery):
    try:
        _, action = call.data.split("cfg:", 1)
    except Exception:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return

    await _apply_cfg_action(call.from_user.id, action)
    pool = await get_pool()
    st = await get_or_create_scanner_settings(pool, call.from_user.id)

    # –û–±–Ω–æ–≤–∏–º —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    try:
        await call.message.edit_text(_settings_text(st), reply_markup=_settings_kb())
    except Exception:
        # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
        await call.message.answer(_settings_text(st), reply_markup=_settings_kb())

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–û–±–Ω–æ–≤–∏—Ç—å" ‚Äî –±—ã—Å—Ç—Ä—ã–π —Å–∫–∞–Ω (–¥–æ 3 –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤)
    if action == "refresh":
        bot = call.message.bot
        await quick_scan_for_user(bot, call.from_user.id, pool, max_items=3)

    await call.answer("–ì–æ—Ç–æ–≤–æ")

# ======== –ö–æ–º–∞–Ω–¥—ã —Å–∫–∞–Ω–µ—Ä–∞ ========
async def scanner_on_handler(m: types.Message, pool: asyncpg.Pool):
    await set_scanner_enabled(pool, m.from_user.id, True)
    await m.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á—ë–Ω. –£–≤–µ–¥–æ–º–ª—é –æ –≤—ã–≥–æ–¥–Ω—ã—Ö –ª–æ—Ç–∞—Ö.", reply_markup=main_kb())

async def scanner_off_handler(m: types.Message, pool: asyncpg.Pool):
    await set_scanner_enabled(pool, m.from_user.id, False)
    await m.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω.", reply_markup=main_kb())

async def set_discount_handler(m: types.Message, pool: asyncpg.Pool):
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–£–∫–∞–∂–∏ –∑–Ω–∞—á–µ–Ω–∏–µ: /set_discount 30")
        return
    try:
        val = float(parts[1].replace(",", "."))
    except Exception:
        await m.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–∏–º–µ—Ä: /set_discount 30")
        return
    await update_scanner_settings(pool, m.from_user.id, min_discount=val)
    await m.answer("–ú–∏–Ω. —Å–∫–∏–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

async def set_maxprice_handler(m: types.Message, pool: asyncpg.Pool):
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await update_scanner_settings(pool, m.from_user.id, max_price_ton=None)
        await m.answer("–õ–∏–º–∏—Ç —Ü–µ–Ω—ã —Å–Ω—è—Ç.")
        return
    try:
        val = float(parts[1].replace(",", "."))
    except Exception:
        await m.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–∏–º–µ—Ä: /set_maxprice 12.5")
        return
    await update_scanner_settings(pool, m.from_user.id, max_price_ton=val)
    await m.answer("–ú–∞–∫—Å. —Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

async def set_collections_handler(m: types.Message, pool: asyncpg.Pool):
    parts = (m.text or "").split(maxsplit=1)
    cols: Optional[List[str]] = None
    if len(parts) >= 2:
        cols = [c.strip() for c in parts[1].split(",") if c.strip()]
    await update_scanner_settings(pool, m.from_user.id, collections=cols)
    await m.answer("–°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω.")

async def scanner_test_handler(m: types.Message, bot: Bot, pool: asyncpg.Pool):
    items = await fetch_listings()
    if not items:
        await m.answer("–§–∏–¥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (LISTINGS_FEED_URL).")
        return
    st = await get_or_create_scanner_settings(pool, m.from_user.id)
    sent = 0
    for it in items[:20]:
        if _item_matches(it, st):
            await send_item_alert(bot, m.from_user.id, it)
            sent += 1
    if sent == 0:
        await m.answer("–°–µ–π—á–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª–æ—Ç–æ–≤ –Ω–µ—Ç.")
    else:
        await m.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–æ—Ç–æ–≤: {sent}")

# ======== –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∏–¥–∞ ========
async def scanner_source_handler(m: types.Message):
    url = LISTINGS_FEED_URL or "‚Äî –Ω–µ –∑–∞–¥–∞–Ω ‚Äî"
    await m.answer(
        "–ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∏–¥–∞:\n"
        f"{url}\n\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∞: {SCAN_INTERVAL_SEC} —Å–µ–∫\n"
        f"–û–∫–Ω–æ —Å–≤–µ–∂–µ—Å—Ç–∏: {SCAN_LOOKBACK_MIN} –º–∏–Ω"
    )

async def scanner_ping_handler(m: types.Message):
    url = LISTINGS_FEED_URL
    if not url:
        await m.answer("LISTINGS_FEED_URL –Ω–µ –∑–∞–¥–∞–Ω.")
        return
    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            r = await client.get(url)
        if r.status_code != 200:
            await m.answer(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–¥–∞: HTTP {r.status_code}")
            return
        data = r.json()
        items = data if isinstance(data, list) else (data.get("items") or [])
        n = len(items) if isinstance(items, list) else 0
        names = []
        if isinstance(items, list):
            for it in items[:3]:
                nm = (it.get("name") or it.get("title") or "‚Äî")
                names.append(str(nm))
        names_txt = ", ".join(names) if names else "‚Äî"
        await m.answer(f"–§–∏–¥ OK. –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {n}. –ü–µ—Ä–≤—ã–µ: {names_txt}")
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∏–¥ ({type(e).__name__})")

# ======== –°–ª—É–∂–µ–±–Ω–∞—è: —Å–±—Ä–æ—Å –∞–Ω—Ç–∏–¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–∞–¥–º–∏–Ω) ========
async def scanner_reset_handler(m: types.Message, pool: asyncpg.Pool):
    if m.from_user.id != ADMIN_ID:
        await m.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    async with (await get_pool()).acquire() as con:
        cnt = await con.fetchval("SELECT COUNT(*) FROM app_found_deals")
        await con.execute("TRUNCATE app_found_deals")
    await m.answer(f"–°–±—Ä–æ—à–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {cnt}. –ê–Ω—Ç–∏–¥—É–±–ª–∏–∫–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã.")

# ======== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ========
def register_handlers(dp: Dispatcher, bot: Bot, pool: asyncpg.Pool):
    dp.register_message_handler(lambda m: start_handler(m, pool), commands={"start"})
    dp.register_message_handler(lambda m: set_wallet_handler(m, pool), commands={"set_wallet"})
    dp.register_message_handler(lambda m: health_handler(m, pool), commands={"health"})

    dp.register_message_handler(lambda m, b=bot: pay_handler(m, b, pool), commands={"pay"})

    # —Å–∫–∞–Ω–µ—Ä
    dp.register_message_handler(lambda m: scanner_on_handler(m, pool), commands={"scanner_on"})
    dp.register_message_handler(lambda m: scanner_off_handler(m, pool), commands={"scanner_off"})
    dp.register_message_handler(lambda m: scanner_settings_handler(m, pool), commands={"scanner_settings"})
    dp.register_message_handler(lambda m: set_discount_handler(m, pool), commands={"set_discount"})
    dp.register_message_handler(lambda m: set_maxprice_handler(m, pool), commands={"set_maxprice"})
    dp.register_message_handler(lambda m: set_collections_handler(m, pool), commands={"set_collections"})
    dp.register_message_handler(lambda m, b=bot: scanner_test_handler(m, b, pool), commands={"scanner_test"})
    dp.register_message_handler(lambda m: scanner_reset_handler(m, pool), commands={"scanner_reset"})
    dp.register_message_handler(scanner_source_handler, commands={"scanner_source"})
    dp.register_message_handler(scanner_ping_handler, commands={"scanner_ping"})

    # reply-–∫–Ω–æ–ø–∫–∏ (–ø—Ä–∏–º–µ—Ä)
    dp.register_message_handler(lambda m: scanner_on_handler(m, pool), lambda m: m.text == "–ö—É–ø–∏—Ç—å NFT")
    dp.register_message_handler(lambda m: scanner_settings_handler(m, pool), lambda m: m.text == "–û –∫–æ–ª–ª–µ–∫—Ü–∏–∏")

    # callbacks –Ω–∞—Å—Ç—Ä–æ–µ–∫
    dp.register_callback_query_handler(cb_settings, lambda c: c.data and c.data.startswith("cfg:"))
